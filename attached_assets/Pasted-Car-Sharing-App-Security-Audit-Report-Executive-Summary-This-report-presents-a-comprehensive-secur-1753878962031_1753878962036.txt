Car-Sharing App Security Audit Report
Executive Summary
This report presents a comprehensive security assessment of the car-sharing application built with React and Express. The audit identified several critical security vulnerabilities that require immediate attention to protect user data, prevent unauthorized access, and ensure the integrity of the platform.

Key Findings:
Critical: Authentication flaws exposing user sessions to XSS attacks
Critical: Authorization weaknesses allowing unauthorized admin actions
High Risk: Input validation vulnerabilities enabling injection attacks
Medium Risk: Missing security headers and insecure configurations
Medium Risk: Token management issues with excessive expiration times
Risk Assessment:
Vulnerability
Severity
Likelihood
Impact
Token Storage
Critical
High
Complete account compromise
Authorization
Critical
High
Data manipulation, system takeover
Input Validation
High
Medium
Data theft, system corruption
Security Headers
Medium
Low
Information disclosure
Token Expiration
Medium
Medium
Extended session hijacking
Recommended Priorities:
Immediate: Fix authentication and authorization issues
This Week: Implement input validation and security headers
Next Sprint: Add rate limiting and monitoring
Critical Security Vulnerabilities
1. Authentication Flaws (Critical)
Issue:
JWT tokens are stored in localStorage and returned in response bodies, making them vulnerable to XSS attacks.

Vulnerable Code:
// client/src/features/auth/authSlice.js
localStorage.setItem('userInfo', JSON.stringify(data));

// server/controllers/userController.js
res.status(200).json({
_id: user._id,
name: user.name,
email: user.email,
token: generateToken(user._id) // Token exposed
});

Impact:
Complete account compromise through XSS
Session hijacking
Unauthorized access to user data
Fix:
// Server: Set HttpOnly cookie
res.cookie('token', token, {
httpOnly: true,
secure: process.env.NODE_ENV !== 'development',
sameSite: 'strict',
maxAge: 15 * 60 * 1000
});

// Client: Remove localStorage usage
// Just set state, no storage
return data; // Without token

2. Authorization Weaknesses (Critical)
Issue:
Any authenticated user can perform admin actions like creating and deleting cars.

Vulnerable Code:
// server/controllers/carController.js
const createCar = asyncHandler(async (req, res) => {
const car = await Car.create({
user: req.user.id, // Incorrect association
...req.body
});
});

const deleteCar = asyncHandler(async (req, res) => {
const car = await Car.findById(req.params.id);
await car.remove(); // No ownership check
});

Impact:
Unauthorized data manipulation
System compromise
Business logic violation
Fix:
// Add role field to User model
role: {
type: String,
enum: ['user', 'admin'],
default: 'user'
}

// Create admin middleware
const admin = (req, res, next) => {
if (req.user && req.user.role === 'admin') {
next();
} else {
res.status(401);
throw new Error('Not authorized as an admin');
}
};

// Protect routes
router.post('/', protect, admin, createCar);

3. Input Validation Vulnerabilities (High Risk)
Issue:
No input validation on critical endpoints allows injection attacks.

Vulnerable Code:
// server/controllers/userController.js
const registerUser = asyncHandler(async (req, res) => {
const { name, email, password } = req.body;
// No validation
});

Impact:
SQL/NoSQL injection
XSS attacks
Data corruption
Fix:
// Install express-validator
npm install express-validator

// Add validation middleware
const { body, validationResult } = require('express-validator');

const validateUser = [
body('name').trim().isLength({ min: 3 }).escape(),
body('email').isEmail().normalizeEmail(),
body('password').isLength({ min: 8 }).matches(/\d/).matches(/[A-Z]/)
];

// In route
router.post('/register', validateUser, registerUser);

4. Security Headers Missing (Medium Risk)
Issue:
Incomplete security headers configuration.

Vulnerable Code:
// server/app.js
app.use(helmet()); // Incomplete
app.use(cors({
origin: "http://localhost:3000", // Too permissive
credentials: true
}));

Impact:
Missing protection against common attacks
Information disclosure
Clickjacking vulnerability
Fix:
// Enhanced helmet configuration
app.use(helmet({
contentSecurityPolicy: {
directives: {
defaultSrc: ["'self'"],
styleSrc: ["'self'", "'unsafe-inline'"],
scriptSrc: ["'self'"],
imgSrc: ["'self'", "data:", "https://res.cloudinary.com&quot;]
}
},
hsts: {
maxAge: 31536000,
includeSubDomains: true,
preload: true
}
}));

// Stricter CORS
app.use(cors({
origin: process.env.NODE_ENV === 'production'
? 'https://yourdomain.com'
: 'http://localhost:3000',
credentials: true
}));

5. Token Expiration Too Long (Medium Risk)
Issue:
JWT tokens valid for 30 days provide extended window for abuse.

Vulnerable Code:
// server/utils/generateToken.js
const generateToken = (id) => {
return jwt.sign({ id }, process.env.JWT_SECRET, {
expiresIn: '30d', // Too long
});
};

Impact:
Extended session hijacking
No session invalidation
Increased impact of token theft
Fix:
// Shorten access token
const generateToken = (id) => {
return jwt.sign({ id }, process.env.JWT_SECRET, {
expiresIn: '15m', // Short-lived
});
};

// Implement refresh tokens
const generateRefreshToken = (id) => {
return jwt.sign({ id }, process.env.REFRESH_SECRET, {
expiresIn: '7d',
});
};

Implementation Guide
Step 1: Authentication Fixes
Server Changes:
Update server/controllers/userController.js:
const registerUser = asyncHandler(async (req, res) => {
// ... existing code ...
if (user) {
const token = generateToken(user._id);

// Set HttpOnly cookie
res.cookie('token', token, {
httpOnly: true,
secure: process.env.NODE_ENV !== 'development',
sameSite: 'strict',
maxAge: 15 * 60 * 1000,
});

res.status(201).json({
_id: user._id,
name: user.name,
email: user.email,
// No token in response
});
}
});

Update server/utils/generateToken.js:
const generateToken = (id) => {
return jwt.sign({ id }, process.env.JWT_SECRET, {
expiresIn: '15m',
});
};
const generateRefreshToken = (id) => {
return jwt.sign({ id }, process.env.REFRESH_SECRET, {
expiresIn: '7d',
});
};

module.exports = { generateToken, generateRefreshToken };

Client Changes:
Update client/src/features/auth/authSlice.js:
export const register = createAsyncThunk(
'auth/register',
async ({ name, email, password }, thunkAPI) => {
try {
const response = await fetch('/api/users', {
method: 'POST',
headers: {
'Content-Type': 'application/json',
},
body: JSON.stringify({ name, email, password }),
credentials: 'include', // Important for cookies
});
const data = await response.json();
return data; // No token handling
} catch (error) {
return thunkAPI.rejectWithValue(error.message);
}
}
);

Remove all localStorage.setItem calls
Step 2: Authorization Fixes
Model Updates:
Update server/models/userModel.js:
const userSchema = new Schema({
// ... existing fields ...
role: {
type: String,
enum: ['user', 'admin'],
default: 'user',
},
});
Middleware:
Create server/middleware/adminMiddleware.js:
const admin = (req, res, next) => {
if (req.user && req.user.role === 'admin') {
next();
} else {
res.status(401);
throw new Error('Not authorized as an admin');
}
};
module.exports = { admin };

Route Protection:
Update server/routes/carRoutes.js:
const { admin } = require('../middleware/adminMiddleware');
router.post('/', protect, admin, createCar);
router.delete('/:id', protect, admin, deleteCar);
router.put('/:id', protect, admin, updateCar);

Step 3: Input Validation
Installation:
npm install express-validator

Validation Middleware:
Create server/middleware/validationMiddleware.js:
const { body, validationResult } = require('express-validator');
const validateUser = [
body('name')
.trim()
.isLength({ min: 3 })
.withMessage('Name must be at least 3 characters')
.escape(),
body('email')
.isEmail()
.normalizeEmail()
.withMessage('Please provide a valid email'),
body('password')
.isLength({ min: 8 })
.withMessage('Password must be at least 8 characters')
.matches(/\d/)
.withMessage('Password must contain a number')
.matches(/[A-Z]/)
.withMessage('Password must contain an uppercase letter'),
];

const handleValidationErrors = (req, res, next) => {
const errors = validationResult(req);
if (!errors.isEmpty()) {
return res.status(400).json({ errors: errors.array() });
}
next();
};

module.exports = {
validateUser,
handleValidationErrors,
};

Route Updates:
Update server/routes/userRoutes.js:
const { validateUser, handleValidationErrors } = require('../middleware/validationMiddleware');
router.post(
'/',
validateUser,
handleValidationErrors,
registerUser
);

Step 4: Security Headers
Installation:
npm install helmet cors express-rate-limit express-mongo-sanitize xss-clean

App Configuration:
Update server/app.js:
const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const mongoSanitize = require('express-mongo-sanitize');
const xss = require('xss-clean');
const rateLimit = require('express-rate-limit');
const app = express();

// Security middleware
app.use(helmet({
contentSecurityPolicy: {
directives: {
defaultSrc: ["'self'"],
styleSrc: ["'self'", "'unsafe-inline'"],
scriptSrc: ["'self'"],
imgSrc: ["'self'", "data:", "https://res.cloudinary.com&quot;],
},
},
hsts: {
maxAge: 31536000,
includeSubDomains: true,
preload: true,
},
}));

// Rate limiting
const limiter = rateLimit({
windowMs: 15 * 60 * 1000,
max: 100,
message: 'Too many requests from this IP, please try again later.',
});
app.use('/api/', limiter);

// Data sanitization
app.use(mongoSanitize());
app.use(xss());

// CORS
app.use(cors({
origin: process.env.NODE_ENV === 'production'
? 'https://yourdomain.com'
: 'http://localhost:3000',
credentials: true,
}));

// Body parser
app.use(express.json({ limit: '10kb' }));

Testing and Verification
Security Test Script
Create security-test.js:
// Test for SQL injection
const testSQLInjection = async () => {
const maliciousPayload = {
email: "' OR 1=1 --",
password: "x"
};

try {
const response = await fetch('/api/users/login', {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify(maliciousPayload),
credentials: 'include',
});

console.log('SQL Injection Test:', response.status === 401 ? 'PASSED' : 'FAILED');
} catch (error) {
console.error('SQL Injection Test Error:', error);
}
};

// Test for XSS
const testXSS = async () => {
const xssPayload = {
name: 'alert("XSS")',
email: 'test@example.com',
password: 'Password123'
};

try {
const response = await fetch('/api/users', {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify(xssPayload),
credentials: 'include',
});

const data = await response.json();
console.log('XSS Test:', !data.name.includes('<script>') ? 'PASSED' : 'FAILED');
} catch (error) {
console.error('XSS Test Error:', error);
}
};

// Run tests
testSQLInjection();
testXSS();

Verification Checklist
Authentication:
 Tokens stored in HttpOnly cookies only
 No tokens in response bodies
 No localStorage usage for auth
 Token expiration set to 15 minutes
 Logout clears cookies properly
Authorization:
 Admin middleware implemented
 Admin routes protected
 Role field added to User model
 Car creation/deletion requires admin role
 Ownership checks on sensitive operations
Input Validation:
 User input validated on all endpoints
 Password strength requirements enforced
 Email format validation
 XSS protection on all inputs
 SQL injection prevention
Security Headers:
 Helmet configured properly
 CSP headers implemented
 HSTS enabled
 CORS properly restricted
 Rate limiting active
General:
 Error messages sanitized
 Environment variables secured
 Dependencies updated
 Security tests passing
 No sensitive data in client code
Appendices
Required npm Packages
Security packages
npm install helmet cors express-rate-limit express-mongo-sanitize xss-clean
npm install express-validator

Development
npm install --save-dev nodemon

Environment Variables
NODE_ENV=development
PORT=5000

JWT Secrets (use strong secrets in production)
JWT_SECRET=your_strong_jwt_secret_here
REFRESH_SECRET=your_strong_refresh_secret_here

Database
MONGO_URI=your_mongodb_connection_string

CORS (update for production)
CLIENT_URL=http://localhost:3000

Security Middleware Templates
Admin Middleware (server/middleware/adminMiddleware.js)
const admin = (req, res, next) => {
if (req.user && req.user.role === 'admin') {
next();
} else {
res.status(401);
throw new Error('Not authorized as an admin');
}
};

module.exports = { admin };

Validation Middleware (server/middleware/validationMiddleware.js)
const { body, validationResult } = require('express-validator');

const validateUser = [
body('name')
.trim()
.isLength({ min: 3 })
.withMessage('Name must be at least 3 characters')
.escape(),
body('email')
.isEmail()
.normalizeEmail()
.withMessage('Please provide a valid email'),
body('password')
.isLength({ min: 8 })
.withMessage('Password must be at least 8 characters')
.matches(/\d/)
.withMessage('Password must contain a number')
.matches(/[A-Z]/)
.withMessage('Password must contain an uppercase letter'),
];

const handleValidationErrors = (req, res, next) => {
const errors = validationResult(req);
if (!errors.isEmpty()) {
return res.status(400).json({ errors: errors.array() });
}
next();
};

module.exports = {
validateUser,
handleValidationErrors,
};

Error Middleware (server/middleware/errorMiddleware.js)
const errorHandler = (err, req, res, next) => {
console.error(err.stack);

const statusCode = res.statusCode === 200 ? 500 : res.statusCode;

res.status(statusCode).json({
message: err.message,
stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
});
};

module.exports = { errorHandler };

Conclusion
This security audit has identified critical vulnerabilities in the car-sharing application that require immediate attention. The implementation of the recommended fixes will significantly improve the security posture of the application and protect against common attack vectors.