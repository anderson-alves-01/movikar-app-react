import { storage } from "../storage.js";
import { PixPayoutService } from "./pixPayoutService.js";

export class AutoPayoutService {
  private pixService: PixPayoutService;

  constructor() {
    this.pixService = new PixPayoutService();
  }

  /**
   * Trigger autom√°tico ap√≥s confirma√ß√£o de pagamento
   */
  async triggerPayoutAfterPayment(bookingId: number): Promise<void> {
    console.log("üöÄ Trigger autom√°tico de repasse para booking:", bookingId);

    try {
      // 1. Buscar dados da reserva
      const booking = await storage.getBooking(bookingId);
      if (!booking) {
        console.error("‚ùå Booking n√£o encontrado:", bookingId);
        return;
      }

      // 2. Verificar se pagamento est√° confirmado
      if (booking.paymentStatus !== 'paid') {
        console.log("‚è≥ Pagamento ainda n√£o confirmado, aguardando:", booking.paymentStatus);
        return;
      }

      // 3. Verificar se existe vistoria aprovada
      const inspection = await storage.getInspectionByBooking(bookingId);
      if (!inspection) {
        console.log("‚è≥ Aguardando vistoria do ve√≠culo para booking:", bookingId);
        return;
      }

      if (inspection.approvalDecision !== true) {
        if (inspection.approvalDecision === false) {
          console.log("‚ùå Vistoria reprovada, processando estorno para booking:", bookingId);
          await this.processRefundForRejectedInspection(booking, inspection);
        } else {
          console.log("‚è≥ Vistoria ainda pendente de decis√£o para booking:", bookingId);
        }
        return;
      }

      console.log("‚úÖ Vistoria aprovada, prosseguindo com repasse para booking:", bookingId);

      // 4. Aguardar per√≠odo de seguran√ßa ap√≥s aprova√ß√£o da vistoria
      const SECURITY_DELAY_HOURS = 1; // Reduzido para 1 hora ap√≥s vistoria aprovada
      const inspectionTime = inspection.decidedAt || inspection.updatedAt;
      const securityDelay = SECURITY_DELAY_HOURS * 60 * 60 * 1000;
      
      if (inspectionTime && Date.now() - new Date(inspectionTime).getTime() < securityDelay) {
        console.log("‚è∞ Ainda dentro do per√≠odo de seguran√ßa p√≥s-vistoria, aguardando...");
        // Agendar para depois
        setTimeout(() => this.triggerPayoutAfterPayment(bookingId), securityDelay);
        return;
      }

      // 5. Buscar propriet√°rio
      const owner = await storage.getUser(booking.vehicle.ownerId);
      if (!owner?.pix) {
        console.error("‚ùå Propriet√°rio sem PIX cadastrado:", booking.vehicle.ownerId);
        return;
      }

      // 6. Calcular valores
      const adminSettings = await storage.getAdminSettings();
      const serviceFeePercent = parseFloat(adminSettings?.serviceFeePercentage || "10");
      const insuranceFeePercent = parseFloat(adminSettings?.insuranceFeePercentage || "15");
      
      const totalPrice = parseFloat(booking.totalPrice);
      const serviceFee = Math.round((totalPrice * serviceFeePercent) / 100 * 100) / 100;
      const insuranceFee = booking.insuranceFee ? parseFloat(booking.insuranceFee) : 0;
      const netAmount = Math.round((totalPrice - serviceFee - insuranceFee) * 100) / 100;

      // 7. Processar repasse com anti-fraude
      const result = await this.pixService.processPayoutWithFraudCheck({
        bookingId: booking.id,
        ownerId: owner.id,
        renterId: booking.renterId,
        totalAmount: totalPrice,
        serviceFee,
        insuranceFee,
        netAmount,
        ownerPix: owner.pix
      });

      if (result.success) {
        console.log("‚úÖ Repasse autom√°tico processado:", result.message);
      } else {
        console.error("‚ùå Falha no repasse autom√°tico:", result.message);
      }

    } catch (error) {
      console.error("‚ùå Erro no trigger autom√°tico de repasse:", error);
    }
  }

  /**
   * Processar estorno quando vistoria √© rejeitada
   */
  private async processRefundForRejectedInspection(booking: any, inspection: any): Promise<void> {
    try {
      console.log("üîÑ Processando estorno para vistoria rejeitada - Booking:", booking.id);
      
      // Verificar se j√° foi processado
      if (booking.refundProcessed) {
        console.log("‚ÑπÔ∏è Estorno j√° processado para booking:", booking.id);
        return;
      }

      // Buscar dados do locat√°rio
      const renter = await storage.getUser(booking.renterId);
      if (!renter?.pix) {
        console.error("‚ùå Locat√°rio sem PIX cadastrado para estorno:", booking.renterId);
        
        // Marcar para estorno manual
        await storage.updateBooking(booking.id, {
          status: 'refund_pending'
        });
        return;
      }

      // Calcular valor total a estornar (sem descontar taxas)
      const refundAmount = parseFloat(booking.totalPrice);
      
      // Tentar processar estorno via PIX
      const refundResult = await this.pixService.processRefund({
        bookingId: booking.id,
        renterId: booking.renterId,
        amount: refundAmount,
        renterPix: renter.pix,
        reason: `Estorno por vistoria rejeitada: ${inspection.rejectionReason}`
      });

      if (refundResult.success) {
        // Atualizar status da reserva
        await storage.updateBooking(booking.id, {
          status: 'refunded'
        });

        console.log("‚úÖ Estorno processado com sucesso para booking:", booking.id);
      } else {
        console.error("‚ùå Falha no estorno autom√°tico:", refundResult.message);
        
        // Marcar para estorno manual
        await storage.updateBooking(booking.id, {
          status: 'refund_pending'
        });
      }

    } catch (error) {
      console.error("‚ùå Erro no processamento de estorno:", error);
      
      // Marcar para estorno manual em caso de erro
      await storage.updateBooking(booking.id, {
        status: 'refund_pending'
      });
    }
  }

  /**
   * Job em background para processar repasses pendentes
   */
  async processPendingPayouts(): Promise<void> {
    try {
      // Buscar bookings pagos sem repasse processado
      const pendingBookings = await storage.getPendingPayoutBookings();
      
      for (const booking of pendingBookings) {
        await this.triggerPayoutAfterPayment(booking.id);
        
        // Delay entre processamentos para evitar sobrecarga
        await new Promise(resolve => setTimeout(resolve, 5000));
      }

    } catch (error) {
      console.error("‚ùå Erro no job de repasses pendentes:", error);
    }
  }

  /**
   * Webhook handler para pagamentos Stripe
   */
  async handleStripeWebhook(event: any): Promise<void> {
    try {
      if (event.type === 'payment_intent.succeeded') {
        const paymentIntent = event.data.object;
        const bookingId = parseInt(paymentIntent.metadata.bookingId);
        
        if (bookingId) {
          console.log("üí≥ Webhook Stripe recebido - pagamento confirmado:", bookingId);
          
          // Aguardar um pouco antes de processar
          setTimeout(() => this.triggerPayoutAfterPayment(bookingId), 30000);
        }
      }
    } catch (error) {
      console.error("‚ùå Erro no webhook Stripe:", error);
    }
  }
}

// Inst√¢ncia singleton
export const autoPayoutService = new AutoPayoutService();

// Job autom√°tico a cada 30 minutos
if (process.env.NODE_ENV === 'production') {
  setInterval(() => {
    autoPayoutService.processPendingPayouts();
  }, 30 * 60 * 1000);
}