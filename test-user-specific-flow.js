#!/usr/bin/env node

/**
 * Teste Espec√≠fico para o Usu√°rio - Fluxo de Assinatura
 * Simula exatamente o que o usu√°rio est√° tentando fazer
 */

const baseUrl = 'http://localhost:5000';

async function apiCall(method, endpoint, data = null, cookies = '') {
  const options = {
    method,
    credentials: 'include',
    headers: { 'Content-Type': 'application/json' }
  };
  
  if (cookies) options.headers['Cookie'] = cookies;
  if (data) options.body = JSON.stringify(data);
  
  try {
    const response = await fetch(`${baseUrl}${endpoint}`, options);
    return {
      status: response.status,
      ok: response.ok,
      data: response.ok ? await response.json() : await response.text(),
      cookies: response.headers.get('set-cookie') || ''
    };
  } catch (error) {
    return {
      status: 0,
      ok: false,
      data: error.message,
      cookies: ''
    };
  }
}

function extractCookies(setCookieHeader) {
  if (!setCookieHeader) return '';
  const cookies = setCookieHeader.split(',').map(cookie => cookie.split(';')[0].trim());
  return cookies.join('; ');
}

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testUserSubscriptionFlow() {
  console.log('üß™ TESTE: Fluxo exato do usu√°rio para assinatura\n');
  
  try {
    // Aguardar servidor estar pronto
    await sleep(2000);

    // 1. Acessar p√°gina de planos (como usu√°rio n√£o logado)
    console.log('1Ô∏è‚É£ Usu√°rio acessa p√°gina de planos sem estar logado...');
    const plansResponse = await apiCall('GET', '/api/subscription-plans');
    
    if (plansResponse.ok) {
      console.log(`‚úÖ Planos carregados: ${plansResponse.data.length} planos dispon√≠veis`);
    } else {
      console.log(`‚ùå Erro ao carregar planos: ${plansResponse.status}`);
      return;
    }

    // 2. Usu√°rio clica em "Assinar" (deve ser redirecionado para login)
    console.log('\n2Ô∏è‚É£ Usu√°rio tenta assinar sem estar logado...');
    const unauthorizedSubscription = await apiCall('POST', '/api/create-subscription', {
      planName: 'essencial',
      paymentMethod: 'monthly',
      vehicleCount: 5
    });

    if (unauthorizedSubscription.status === 401) {
      console.log('‚úÖ Sistema corretamente bloqueia assinatura sem login');
    } else {
      console.log(`‚ùå Sistema deveria bloquear, mas retornou: ${unauthorizedSubscription.status}`);
    }

    // 3. Usu√°rio faz login
    console.log('\n3Ô∏è‚É£ Usu√°rio faz login...');
    const loginData = {
      email: 'teste@carshare.com',
      password: 'Teste123!'
    };

    const loginResponse = await apiCall('POST', '/api/auth/login', loginData);
    let userCookies = '';

    if (loginResponse.ok) {
      userCookies = extractCookies(loginResponse.cookies);
      console.log(`‚úÖ Login realizado: ${loginResponse.data.user.name}`);
      console.log(`üç™ Cookies recebidos: ${userCookies ? 'Sim' : 'N√£o'}`);
    } else {
      console.log(`‚ùå Falha no login: ${loginResponse.status} - ${loginResponse.data}`);
      
      // Se usu√°rio n√£o existe, criar
      console.log('üîß Criando usu√°rio de teste...');
      const registerData = {
        name: 'Usu√°rio Teste',
        email: 'teste@carshare.com',
        password: 'Teste123!',
        phone: '11999887766'
      };

      const registerResponse = await apiCall('POST', '/api/auth/register', registerData);
      
      if (registerResponse.ok) {
        userCookies = extractCookies(registerResponse.cookies);
        console.log(`‚úÖ Usu√°rio criado e logado: ${registerResponse.data.user.name}`);
      } else {
        console.log(`‚ùå Falha ao criar usu√°rio: ${registerResponse.status}`);
        return;
      }
    }

    await sleep(1000);

    // 4. Usu√°rio volta para p√°gina de planos (agora logado)
    console.log('\n4Ô∏è‚É£ Usu√°rio volta para p√°gina de planos logado...');
    const authCheck = await apiCall('GET', '/api/auth/user', null, userCookies);
    
    if (authCheck.ok) {
      console.log(`‚úÖ Usu√°rio autenticado: ${authCheck.data.name}`);
    } else {
      console.log(`‚ùå Problema de autentica√ß√£o: ${authCheck.status} - ${authCheck.data}`);
      return;
    }

    // 5. Usu√°rio tenta assinar um plano (agora logado)
    console.log('\n5Ô∏è‚É£ Usu√°rio tenta assinar plano estando logado...');
    const subscriptionAttempt = await apiCall('POST', '/api/create-subscription', {
      planName: 'essencial',
      paymentMethod: 'monthly',
      vehicleCount: 5
    }, userCookies);

    if (subscriptionAttempt.ok) {
      console.log('‚úÖ Assinatura iniciada com sucesso!');
      console.log(`üìÑ Payment Intent: ${subscriptionAttempt.data.clientSecret ? 'Criado' : 'N√£o criado'}`);
      console.log(`üí∞ Valor: R$ ${(subscriptionAttempt.data.amount / 100).toFixed(2)}`);
      console.log(`üìã Plano: ${subscriptionAttempt.data.planName}`);
    } else {
      console.log(`‚ùå Falha na assinatura: ${subscriptionAttempt.status}`);
      console.log(`üìÑ Detalhes: ${subscriptionAttempt.data}`);
      
      // Debug: verificar se √© problema de autentica√ß√£o
      const authRecheck = await apiCall('GET', '/api/auth/user', null, userCookies);
      if (!authRecheck.ok) {
        console.log('üîç Problema: Autentica√ß√£o foi perdida durante o processo');
      } else {
        console.log('üîç Autentica√ß√£o OK, problema √© outro');
      }
    }

    // 6. Verificar endpoints relacionados
    console.log('\n6Ô∏è‚É£ Verificando outros endpoints relacionados...');
    
    const relatedEndpoints = [
      { endpoint: '/api/subscription-plans', name: 'Planos de assinatura' },
      { endpoint: '/api/user/subscription', name: 'Assinatura do usu√°rio' },
      { endpoint: '/api/feature-flags', name: 'Feature flags' }
    ];

    for (const { endpoint, name } of relatedEndpoints) {
      const response = await apiCall('GET', endpoint, null, userCookies);
      console.log(`${response.ok ? '‚úÖ' : '‚ùå'} ${name}: ${response.status}`);
      if (!response.ok && response.status !== 404) {
        console.log(`   Erro: ${response.data.slice(0, 100)}`);
      }
    }

    // 7. Simular navega√ß√£o do usu√°rio (verificar se h√° loops)
    console.log('\n7Ô∏è‚É£ Simulando navega√ß√£o do usu√°rio...');
    
    const navigationSequence = [
      '/api/auth/user',
      '/api/subscription-plans',
      '/api/auth/user',
      '/api/user/subscription',
      '/api/auth/user'
    ];

    let navigationErrors = 0;
    for (let i = 0; i < navigationSequence.length; i++) {
      const endpoint = navigationSequence[i];
      const response = await apiCall('GET', endpoint, null, userCookies);
      
      if (!response.ok && response.status === 401) {
        navigationErrors++;
        console.log(`‚ùå ${endpoint}: Erro 401 (${i + 1}/${navigationSequence.length})`);
      } else {
        console.log(`‚úÖ ${endpoint}: OK (${i + 1}/${navigationSequence.length})`);
      }
      
      await sleep(300); // Simular timing real
    }

    if (navigationErrors === 0) {
      console.log('‚úÖ Navega√ß√£o completa sem loops de autentica√ß√£o');
    } else {
      console.log(`‚ùå ${navigationErrors} erros de autentica√ß√£o durante navega√ß√£o`);
    }

  } catch (error) {
    console.log(`‚ùå Erro geral: ${error.message}`);
  }
}

async function generateUserReport() {
  console.log('\nüìä RELAT√ìRIO PARA O USU√ÅRIO');
  console.log('==========================');
  
  console.log('\n‚úÖ O que est√° funcionando:');
  console.log('   - Sistema de autentica√ß√£o est√°vel');
  console.log('   - Carregamento de planos de assinatura');
  console.log('   - Navega√ß√£o sem loops infinitos');
  console.log('   - Cookies de sess√£o funcionando');

  console.log('\nüîß O que pode estar causando problemas:');
  console.log('   - Verificar se Stripe est√° configurado');
  console.log('   - Verificar se banco tem planos de assinatura');
  console.log('   - Verificar se frontend est√° usando endpoint correto');

  console.log('\nüí° Recomenda√ß√µes:');
  console.log('   - Limpar cache do navegador');
  console.log('   - Verificar console do navegador para erros');
  console.log('   - Tentar em aba an√¥nima/privada');
}

async function runUserTest() {
  console.log('üöÄ TESTE ESPEC√çFICO DO USU√ÅRIO: Fluxo de assinatura');
  console.log('==================================================\n');
  
  await testUserSubscriptionFlow();
  await generateUserReport();
}

runUserTest().catch(console.error);