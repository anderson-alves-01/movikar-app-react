// Teste de integra√ß√£o do fluxo completo de pagamento
// Execute com: node test-payment-flow.js

const BASE_URL = 'http://localhost:5000';

async function makeRequest(method, endpoint, data = null, token = null) {
  const headers = {
    'Content-Type': 'application/json',
  };
  
  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  const config = {
    method,
    headers,
  };

  if (data) {
    config.body = JSON.stringify(data);
  }

  const response = await fetch(`${BASE_URL}${endpoint}`, config);
  const result = await response.json();
  
  if (!response.ok) {
    throw new Error(`${response.status}: ${result.message || 'Request failed'}`);
  }
  
  return result;
}

async function testPaymentFlow() {
  console.log('üß™ Iniciando teste de integra√ß√£o do fluxo de pagamento...\n');

  try {
    // 1. Login como usu√°rio verificado
    console.log('1. Fazendo login como usu√°rio verificado...');
    const loginResponse = await makeRequest('POST', '/api/auth/login', {
      email: 'asouzamax@gmail.com',
      password: 'senha123'
    });
    
    const userToken = loginResponse.token;
    console.log('‚úÖ Login realizado com sucesso');
    console.log(`   Token: ${userToken.substring(0, 20)}...`);

    // 2. Verificar status de verifica√ß√£o do usu√°rio
    console.log('\n2. Verificando status de verifica√ß√£o do usu√°rio...');
    const userInfo = await makeRequest('GET', '/api/auth/user', null, userToken);
    console.log('‚úÖ Usu√°rio autenticado:');
    console.log(`   Nome: ${userInfo.name}`);
    console.log(`   Status: ${userInfo.verificationStatus}`);
    console.log(`   Pode alugar: ${userInfo.canRentVehicles}`);

    if (userInfo.verificationStatus !== 'verified') {
      throw new Error('Usu√°rio n√£o est√° verificado. N√£o pode prosseguir com o aluguel.');
    }

    // 3. Buscar ve√≠culos dispon√≠veis
    console.log('\n3. Buscando ve√≠culos dispon√≠veis...');
    const vehicles = await makeRequest('GET', '/api/vehicles');
    console.log(`‚úÖ Encontrados ${vehicles.length} ve√≠culos`);
    
    if (vehicles.length === 0) {
      throw new Error('Nenhum ve√≠culo dispon√≠vel para teste');
    }

    const testVehicle = vehicles[0];
    console.log(`   Testando com ve√≠culo: ${testVehicle.brand} ${testVehicle.model}`);
    console.log(`   Pre√ßo por dia: R$ ${testVehicle.pricePerDay}`);

    // 4. Verificar disponibilidade do ve√≠culo
    console.log('\n4. Verificando disponibilidade do ve√≠culo...');
    const startDate = new Date();
    startDate.setDate(startDate.getDate() + 1); // Amanh√£
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + 3); // Daqui 3 dias

    const availabilityCheck = await makeRequest('GET', 
      `/api/vehicles/${testVehicle.id}/availability?startDate=${startDate.toISOString().split('T')[0]}&endDate=${endDate.toISOString().split('T')[0]}`
    );
    console.log('‚úÖ Disponibilidade verificada:');
    console.log(`   Dispon√≠vel: ${availabilityCheck.available}`);

    // 5. Criar payment intent
    console.log('\n5. Criando payment intent...');
    const totalPrice = (parseFloat(testVehicle.pricePerDay) * 2).toFixed(2); // 2 dias
    
    const paymentIntentData = {
      vehicleId: testVehicle.id,
      startDate: startDate.toISOString().split('T')[0],
      endDate: endDate.toISOString().split('T')[0],
      totalPrice: totalPrice
    };

    const paymentIntent = await makeRequest('POST', '/api/create-payment-intent', paymentIntentData, userToken);
    console.log('‚úÖ Payment intent criado com sucesso:');
    console.log(`   Client Secret: ${paymentIntent.clientSecret.substring(0, 30)}...`);
    console.log(`   Payment Intent ID: ${paymentIntent.paymentIntentId}`);
    console.log(`   Valor total: R$ ${totalPrice}`);

    // 6. Simular confirma√ß√£o de pagamento (normalmente feito pelo Stripe)
    console.log('\n6. Simulando confirma√ß√£o de pagamento...');
    
    // Nota: Em produ√ß√£o, este passo seria feito pelo Stripe automaticamente
    // Para o teste, vamos direto para a confirma√ß√£o do aluguel
    const confirmRentalData = {
      paymentIntentId: paymentIntent.paymentIntentId,
      vehicleId: testVehicle.id,
      startDate: startDate.toISOString().split('T')[0],
      endDate: endDate.toISOString().split('T')[0],
      totalPrice: totalPrice
    };

    console.log('‚ö†Ô∏è  NOTA: Em produ√ß√£o, o pagamento seria processado pelo Stripe');
    console.log('   Prosseguindo para confirma√ß√£o do aluguel...');

    // 7. Verificar se o payment intent existe no Stripe (apenas log)
    console.log('\n7. Verificando payment intent no sistema...');
    console.log(`   Payment Intent ID: ${paymentIntent.paymentIntentId}`);
    console.log('   Status: Criado e pronto para pagamento');

    // 8. Teste de busca de reservas do usu√°rio
    console.log('\n8. Verificando reservas existentes do usu√°rio...');
    try {
      const userBookings = await makeRequest('GET', '/api/bookings', null, userToken);
      console.log(`‚úÖ Usu√°rio tem ${userBookings.length} reservas existentes`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  Erro ao buscar reservas: ${error.message}`);
    }

    console.log('\nüéâ TESTE DE INTEGRA√á√ÉO CONCLU√çDO COM SUCESSO!');
    console.log('\nResumo do teste:');
    console.log('‚úÖ Login de usu√°rio verificado');
    console.log('‚úÖ Verifica√ß√£o de status de usu√°rio');
    console.log('‚úÖ Busca de ve√≠culos dispon√≠veis');
    console.log('‚úÖ Verifica√ß√£o de disponibilidade');
    console.log('‚úÖ Cria√ß√£o de payment intent');
    console.log('‚úÖ Prepara√ß√£o para confirma√ß√£o de aluguel');
    
    console.log('\nüìã Pr√≥ximos passos para teste completo:');
    console.log('1. Integrar com Stripe Test Mode');
    console.log('2. Confirmar pagamento via Stripe');
    console.log('3. Confirmar aluguel automaticamente');
    console.log('4. Verificar cria√ß√£o de contrato');

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE DE INTEGRA√á√ÉO:');
    console.error(`   ${error.message}`);
    console.error('\nüîç Detalhes do erro:');
    console.error(error);
  }
}

// Executar o teste
testPaymentFlow();